.btn {

  ///
  /// Core button styles
  ///

  position: relative;
  z-index: 1;
  display: inline-block;
  min-width: $btn-min-width;
  padding: $btn-padding-y $btn-padding-x;
  border: $border-width solid transparent;
  line-height: $btn-line-height;
  text-align: center;
  white-space: nowrap;
  cursor: pointer;
  user-select: none;
  transition: all $transition-fast;

  & + & {
    @include media-breakpoint-up(sm) {
      margin-left: $grid-gutter-width / 2;
    }
  }

  &.btn-block + &.btn-block {
    margin-top: $spacer-x;
  }


  ///
  /// Button states
  ///

  &,
  &:hover,
  &:focus {
    text-decoration: none;
  }

  &:hover,
  &.hover {
    box-shadow: $shadow-hover;
  }

  &:focus {
    outline: none;
  }

  &:active,
  &.active {
    box-shadow: $shadow-active;
  }

  &:disabled,
  &.disabled {
    box-shadow: none;
    cursor: not-allowed;
  }


  ///
  /// Pulse animation
  ///

  &::before,
  &::after {
    content: "";
    position: absolute;
    left: 50%;
    top: 50%;
    z-index: -1;
    width: $btn-pulse-size;
    height: $btn-pulse-size;
    border-radius: 50%;
    transform: translateX(-50%) translateY(-50%) scale(0);
  }

  &::before {
    background-color: rgba($blue,.5);
  }

  &::after {
    border: 1px solid $blue;
  }

  // using `:focus` instead of `:active` because the latter only applies `onMouseDown`
  &:not(.disabled):focus {
    &::before {
      animation: pulse .5s .25s cubic-bezier(0, 0, .5, 1);
    }

    &::after {
      animation: pulse .5s cubic-bezier(0, 0, .5, 1);
    }
  }
}

///
/// Button variant styles
///

@each $btn-name, $btn-props in $btn-variants {
  .btn-#{ $btn-name } {
    border-color: map-get($btn-props, border-color);
    background-color: map-get($btn-props, bg);

    &,
    &:hover,
    &:focus {
      color: map-get($btn-props, color);
    }

    &:hover,
    &.hover,
    &:active,
    &.active {
      border-color: transparent;
    }

    &:active,
    &.active {
      background-color: map-get($btn-props, bg-active);
      color: map-get($btn-props, color-active);
    }

    &:disabled,
    &.disabled {
      background-color: map-get($btn-props, bg-disabled);
      color: map-get($btn-props, color-disabled);
      border-color: map-get($btn-props, border-disabled);
    }
  }
}

///
/// Link-style button
///

.btn-link {
  min-width: unset;
  padding-right: $btn-link-padding-x;
  padding-left: $btn-link-padding-x;
  color: $link-color;

  &,
  &:hover,
  &:active,
  &:focus,
  &:disabled {
    background: none;
    border: 0;
    box-shadow: none;
  }

  &:hover,
  &:active,
  &:focus {
    color: $link-hover-color;
  }

  &:disabled,
  &.disabled {
    color: $btn-link-disabled;
  }
}


///
/// Button sizes
///

.btn-lg {
  // min-width: $btn-lg-min-width;
  padding-top: $btn-lg-padding-y;
  padding-bottom: $btn-lg-padding-y;
}

.btn-sm {
  min-width: unset;
  padding: $btn-sm-padding-y $btn-sm-padding-x;
  font-size: $btn-sm-font-size;
}


.btn-block {
  display: block;
  width: 100%;
}

// Larger size for touch-enabled devices
.touchevents .btn {
  padding-top: $btn-lg-padding-y;
  padding-bottom: $btn-lg-padding-y;
}

///
/// Fix border for dark bg
///
.bg-dark .btn-secondary {
  border: none; 
}
